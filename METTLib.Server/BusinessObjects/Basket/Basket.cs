// Generated 28 Feb 2023 10:01 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;
using MELib.Delivery;

namespace MELib.Basket
{
    [Serializable]
    public class Basket
     : MEBusinessBase<Basket>
    {
        #region " Properties and Methods "
       // public string ProductName { get; set; }

       
        //public string ProductDescription { get; set; }

        #region " Properties "
        public static PropertyInfo<int> BasketIDProperty = RegisterProperty<int>(c => c.BasketID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int BasketID
        {
            get { return GetProperty(BasketIDProperty); }
        }

        public static PropertyInfo<int> DeliveryIDProperty = RegisterProperty<int>(c => c.DeliveryID, "ID", 0);
        public int DeliveryID
        {
            get { return GetProperty(DeliveryIDProperty); }
        }
        public static PropertyInfo<DateTime> BasketCreatedOnProperty = RegisterProperty<DateTime>(c => c.BasketCreatedOn, "Basket Created On");
        /// <summary>
        /// Gets and sets the Basket Created On value
        /// </summary>
        [Display(Name = "Basket Created On", Description = ""),
        Required(ErrorMessage = "Basket Created On required")]
        public DateTime BasketCreatedOn
        {
            get
            {
                return GetProperty(BasketCreatedOnProperty);
            }
            set
            {
                SetProperty(BasketCreatedOnProperty, value);
            }
        }

        public static PropertyInfo<String> BasketCreatedByProperty = RegisterProperty<String>(c => c.BasketCreatedBy, "Basket Created By", "");
        /// <summary>
        /// Gets and sets the Basket Created By value
        /// </summary>
        [Display(Name = "Basket Created By", Description = "")]
        public String BasketCreatedBy
        {
            get { return GetProperty(BasketCreatedByProperty); }
            set { SetProperty(BasketCreatedByProperty, value); }
        }

        public static PropertyInfo<DateTime?> BasketModifiedOnProperty = RegisterProperty<DateTime?>(c => c.BasketModifiedOn, "Basket Modified On");
        /// <summary>
        /// Gets and sets the Basket Modified On value
        /// </summary>
        [Display(Name = "Basket Modified On", Description = "")]
        public DateTime? BasketModifiedOn
        {
            get
            {
                return GetProperty(BasketModifiedOnProperty);
            }
            set
            {
                SetProperty(BasketModifiedOnProperty, value);
            }
        }

        public static PropertyInfo<DateTime?> BasketDeletedOnProperty = RegisterProperty<DateTime?>(c => c.BasketDeletedOn, "Basket Deleted On");
        /// <summary>
        /// Gets and sets the Basket Deleted On value
        /// </summary>
        [Display(Name = "Basket Deleted On", Description = "")]
        public DateTime? BasketDeletedOn
        {
            get
            {
                return GetProperty(BasketDeletedOnProperty);
            }
            set
            {
                SetProperty(BasketDeletedOnProperty, value);
            }
        }

        public static PropertyInfo<Decimal> TotalSumProperty = RegisterProperty<Decimal>(c => c.TotalSum, "Total Sum", 0D);
        /// <summary>
        /// Gets and sets the Total Sum value
        /// </summary>
        [Display(Name = "Total Sum", Description = ""),
        Required(ErrorMessage = "Total Sum required")]
        public Decimal TotalSum
        {
            get { return GetProperty(TotalSumProperty); }
            set { SetProperty(TotalSumProperty, value); }
        }

        public static PropertyInfo<Decimal> BasketBalanceProperty = RegisterProperty<Decimal>(c => c.BasketBalance, "Basket Balance", 0D);
        /// <summary>
        /// Gets and sets the Basket Balance value
        /// </summary>
        [Display(Name = "Basket Balance", Description = ""),
        Required(ErrorMessage = "Basket Balance required")]
        public Decimal BasketBalance
        {
            get { return GetProperty(BasketBalanceProperty); }
            set { SetProperty(BasketBalanceProperty, value); }
        }

        public static PropertyInfo<int> QuantityProperty = RegisterProperty<int>(c => c.Quantity, "Quantity", 0);
        /// <summary>
        /// Gets and sets the Quantity value
        /// </summary>
        [Display(Name = "Quantity", Description = ""),
        Required(ErrorMessage = "Quantity required")]
        public int Quantity
        {
            get { return GetProperty(QuantityProperty); }
            set { SetProperty(QuantityProperty, value); }
        }

        public static PropertyInfo<int?> ProductIDProperty = RegisterProperty<int?>(c => c.ProductID, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int? ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "User", 0);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<string> ProductNameProperty = RegisterProperty<string>(c => c.ProductName, "Product Name", 0);
        /// <summary>
        /// Gets and sets the product name value
        /// </summary>
        [Display(Name = "Product Name", Description = "")]
        public string ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<string> ProductDescriptionProperty = RegisterProperty<string>(c => c.ProductDescription, "Product Description", 0);
        /// <summary>
        /// Gets and sets the product description value
        /// </summary>
        [Display(Name = "Product Description", Description = "")]
        public string ProductDescription
        {
            get { return GetProperty(ProductDescriptionProperty); }
            set { SetProperty(ProductDescriptionProperty, value); }
        }

        public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", true);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "Indicator showing if the backet item is Active")]
        public Boolean IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(BasketIDProperty);
        }

        public override string ToString()
        {
            if (this.BasketCreatedBy.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Basket");
                }
                else
                {
                    return String.Format("Blank {0}", "Basket");
                }
            }
            else
            {
                return this.BasketCreatedBy;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewBasket() method.
        }

        public static Basket NewBasket()
        {
            return DataPortal.CreateChild<Basket>();
        }

        public Basket()
        {
            MarkAsChild();
        }

        internal static Basket GetBasket(SafeDataReader dr)
        {
            var b = new Basket();
            b.Fetch(dr);
            return b;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
              
                LoadProperty(BasketIDProperty, sdr.GetInt32(i++));
                LoadProperty(BasketCreatedOnProperty, sdr.GetValue(i++));
                LoadProperty(BasketCreatedByProperty, sdr.GetString(i++));
                LoadProperty(BasketModifiedOnProperty, sdr.GetValue(i++));
                LoadProperty(BasketDeletedOnProperty, sdr.GetValue(i++));
                LoadProperty(TotalSumProperty, sdr.GetDecimal(i++));
                LoadProperty(BasketBalanceProperty, sdr.GetDecimal(i++));
                LoadProperty(QuantityProperty, sdr.GetInt32(i++));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(UserIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(ProductDescriptionProperty, sdr.GetString(i++));
                LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
                LoadProperty(DeliveryIDProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, BasketIDProperty);

           
            cm.Parameters.AddWithValue("@BasketCreatedOn", BasketCreatedOn);           
            cm.Parameters.AddWithValue("@BasketCreatedBy", GetProperty(BasketCreatedByProperty));
            cm.Parameters.AddWithValue("@BasketModifiedOn", Singular.Misc.NothingDBNull(BasketModifiedOn));
            cm.Parameters.AddWithValue("@BasketDeletedOn", Singular.Misc.NothingDBNull(BasketDeletedOn));
            cm.Parameters.AddWithValue("@TotalSum", GetProperty(TotalSumProperty));
            cm.Parameters.AddWithValue("@BasketBalance", GetProperty(BasketBalanceProperty));
            cm.Parameters.AddWithValue("@Quantity", GetProperty(QuantityProperty));
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
            cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
            cm.Parameters.AddWithValue("@DeliveryID", GetProperty(DeliveryIDProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(BasketIDProperty, scm.Parameters["@BasketID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@BasketID", GetProperty(BasketIDProperty));
        }

        #endregion

    }

}