// Generated 22 Feb 2023 08:46 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Orders
{
    [Serializable]
    public class Order
     : MEBusinessBase<Order>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderIDProperty = RegisterProperty<int>(c => c.OrderID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderID
        {
            get { return GetProperty(OrderIDProperty); }
        }

        public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "User", 0);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = "")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<int> BasketIDProperty = RegisterProperty<int>(c => c.BasketID, "Basket", 0);
        /// <summary>
        /// Gets and sets the Basket value
        /// </summary>
        [Display(Name = "Basket", Description = ""),
        Required(ErrorMessage = "Basket required")]
        public int BasketID
        {
            get { return GetProperty(BasketIDProperty); }
            set { SetProperty(BasketIDProperty, value); }
        }

        public static PropertyInfo<int> ProductQuantityProperty = RegisterProperty<int>(c => c.ProductQuantity, "Product Quantity", 0);
        /// <summary>
        /// Gets and sets the Product Quantity value
        /// </summary>
        [Display(Name = "Product Quantity", Description = ""),
        Required(ErrorMessage = "Product Quantity required")]
        public int ProductQuantity
        {
            get { return GetProperty(ProductQuantityProperty); }
            set { SetProperty(ProductQuantityProperty, value); }
        }

        public static PropertyInfo<int> DeliveryIDProperty = RegisterProperty<int>(c => c.DeliveryID, "Delivery", 0);
        /// <summary>
        /// Gets and sets the Delivery value
        /// </summary>
        [Display(Name = "Delivery", Description = ""),
        Required(ErrorMessage = "Delivery required")]
        public int DeliveryID
        {
            get { return GetProperty(DeliveryIDProperty); }
            set { SetProperty(DeliveryIDProperty, value); }
        }

        public static PropertyInfo<DateTime?> OrderTimeProperty = RegisterProperty<DateTime?>(c => c.OrderTime, "Order Time");
        /// <summary>
        /// Gets and sets the Order Time value
        /// </summary>
        [Display(Name = "Order Time", Description = "")]
        public DateTime? OrderTime
        {
            get
            {
                return GetProperty(OrderTimeProperty);
            }
            set
            {
                SetProperty(OrderTimeProperty, value);
            }
        }

        public static PropertyInfo<Decimal> AmountProperty = RegisterProperty<Decimal>(c => c.Amount, "Amount", 0D);
        /// <summary>
        /// Gets and sets the Amount value
        /// </summary>
        [Display(Name = "Amount", Description = ""),
        Required(ErrorMessage = "Amount required")]
        public Decimal Amount
        {
            get { return GetProperty(AmountProperty); }
            set { SetProperty(AmountProperty, value); }
        }

        public bool IsActiveInd { get; set; }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderIDProperty);
        }

        public override string ToString()
        {
            if (this.ProductName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order");
                }
                else
                {
                    return String.Format("Blank {0}", "Order");
                }
            }
            else
            {
                return this.ProductName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrder() method.
        }

        public static Order NewOrder()
        {
            return DataPortal.CreateChild<Order>();
        }

        public Order()
        {
            MarkAsChild();
        }

        internal static Order GetOrder(SafeDataReader dr)
        {
            var o = new Order();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(BasketIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(DeliveryIDProperty, sdr.GetInt32(i++));
                LoadProperty(OrderTimeProperty, sdr.GetValue(i++));
                LoadProperty(AmountProperty, sdr.GetDecimal(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, OrderIDProperty);

            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
            cm.Parameters.AddWithValue("@ProductName", GetProperty(ProductNameProperty));
            cm.Parameters.AddWithValue("@BasketID", GetProperty(BasketIDProperty));
            cm.Parameters.AddWithValue("@ProductQuantity", GetProperty(ProductQuantityProperty));
            cm.Parameters.AddWithValue("@DeliveryID", GetProperty(DeliveryIDProperty));
            cm.Parameters.AddWithValue("@OrderTime", Singular.Misc.NothingDBNull(OrderTime));
            cm.Parameters.AddWithValue("@Amount", GetProperty(AmountProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderIDProperty, scm.Parameters["@OrderID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
        }

        #endregion

    }

}