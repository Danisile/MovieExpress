// Generated 22 Feb 2023 13:29 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;
using MELib.Categories;

namespace MELib.Products
{
    [Serializable]
    public class Product
     : MEBusinessBase<Product>
    {
        #region " Properties and Methods "
        //public int CategoryID { get; set; }

        #region " Properties "

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
        }


        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = "")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<String> ProductDescriptionProperty = RegisterProperty<String>(c => c.ProductDescription, "Product Description", "");
        /// <summary>
        /// Gets and sets the Product Description value
        /// </summary>
        [Display(Name = "Product Description", Description = "")]
        public String ProductDescription
        {
            get { return GetProperty(ProductDescriptionProperty); }
            set { SetProperty(ProductDescriptionProperty, value); }
        }

        public static PropertyInfo<Decimal> ProductPriceProperty = RegisterProperty<Decimal>(c => c.ProductPrice, "Product Price", 0D);
        /// <summary>
        /// Gets and sets the Product Price value
        /// </summary>
        [Display(Name = "Product Price", Description = ""),
        Required(ErrorMessage = "Product Price required")]
        public Decimal ProductPrice
        {
            get { return GetProperty(ProductPriceProperty); }
            set { SetProperty(ProductPriceProperty, value); }
        }
        public static PropertyInfo<int?> CartegoryIDProperty = RegisterProperty<int?>(c => c.CartegoryID, "Cartegory", null);
        /// <summary>
        /// Gets and sets the Cartegory value
        /// </summary>
        [Display(Name = "Cartegory", Description = "Product Category"),
        Singular.DataAnnotations.DropDownWeb(typeof(CategoryList), DisplayFunction = "CategoryName", ValueMember = "CategoryID"),
        Required(ErrorMessage = "Cartegory required")]
        public int? CartegoryID
        {
            get { return GetProperty(CartegoryIDProperty); }
            set { SetProperty(CartegoryIDProperty, value); }
        }

        public static PropertyInfo<String> ProductImageProperty = RegisterProperty<String>(c => c.ProductImage, "Product Image URL", "");
        /// <summary>
        /// Gets and sets the Movie Title value
        /// </summary>
        [Display(Name = "Product Image URL", Description = "Title of the Movie"),
        StringLength(2000, ErrorMessage = "Movie Image URL cannot be more than 2000 characters")]
        public String ProductImage
        {
            get { return GetProperty(ProductImageProperty); }
            set { SetProperty(ProductImageProperty, value); }
        }

        public static PropertyInfo<int> ProductQuantityProperty = RegisterProperty<int>(c => c.ProductQuantity, "Product Quantity", 0);
        /// <summary>
        /// Gets and sets the Product Quantity value
        /// </summary>
        [Display(Name = "Product Quantity", Description = ""),
        Required(ErrorMessage = "Product Quantity required")]
        public int ProductQuantity
        {
            get { return GetProperty(ProductQuantityProperty); }
            set { SetProperty(ProductQuantityProperty, value); }
        }

        public static PropertyInfo<int> UserQuantityProperty = RegisterProperty<int>(c => c.UserQuantity, "User Quantity", 0);
        /// <summary>
        /// Gets and sets the User Quantity value
        /// </summary>
        [Display(Name = "User Quantity", Description = "")]
        public int UserQuantity
        {
            get { return GetProperty(UserQuantityProperty); }
            set { SetProperty(UserQuantityProperty, value); }
        }
 
      
        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(ProductIDProperty);
        }

        public override string ToString()
        {
            if (this.ProductName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Product");
                }
                else
                {
                    return String.Format("Blank {0}", "Product");
                }
            }
            else
            {
                return this.ProductName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewProduct() method.
        }

        public static Product NewProduct()
        {
            return DataPortal.CreateChild<Product>();
        }

        public Product()
        {
            MarkAsChild();
        }

        internal static Product GetProduct(SafeDataReader dr)
        {
            var p = new Product();
            p.Fetch(dr);
            return p;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(ProductIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(ProductDescriptionProperty, sdr.GetString(i++));
                LoadProperty(ProductPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(ProductQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(UserQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(CartegoryIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductImageProperty, sdr.GetString(i++));

            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, ProductIDProperty);

            cm.Parameters.AddWithValue("@ProductName", GetProperty(ProductNameProperty));
            cm.Parameters.AddWithValue("@ProductDescription", GetProperty(ProductDescriptionProperty));
            cm.Parameters.AddWithValue("@ProductPrice", GetProperty(ProductPriceProperty));
            cm.Parameters.AddWithValue("@ProductQuantity", GetProperty(ProductQuantityProperty));
            cm.Parameters.AddWithValue("@UserQuantity", GetProperty(UserQuantityProperty));
            cm.Parameters.AddWithValue("@CategoryID", GetProperty(CartegoryIDProperty));
            cm.Parameters.AddWithValue("@ProductImage", GetProperty(ProductImageProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(ProductIDProperty, scm.Parameters["@ProductID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
        }

        #endregion

    }

}